#!/usr/bin/env ruby

# This script allows users to translate between different versions of the
# compliance maps

require 'yaml'
require 'json'
require 'optparse'
require 'ostruct'
require 'fileutils'

@uid = Time.now.strftime('%s')

def deep_merge(old, new)
  old.merge(new) do |_key, val1, val2|
    if val1.is_a?(Hash) && val2.is_a?(Hash)
      deep_merge(val1, val2)
    elsif val1.is_a?(Array) && val2.is_a?(Array)
      val1 & val2
    else
      val2
    end
  end
end

def parse_options
  options = OpenStruct.new
  options.dst_version = '2.0.0'
  options.output_format = 'yaml'
  options.input = []
  options.input_hash = {}
  options.confine = {}
  options.append = ''

  _opts = OptionParser.new do |opts|
    opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

    opts.separator ''

    opts.on(
      '-i PATH',
      '--input PATH',
      'The source Compliance Mapper Hieradata file',
    ) do |arg|
      options.input << File.absolute_path(arg.strip)
    end

    opts.on(
      '-o PATH',
      '--output PATH',
      'The output Compliance Mapper Hieradata file',
      '  Default: "input" file with the output version appended',
    ) do |arg|
      options.output = File.absolute_path(arg.strip)

      unless File.directory?(File.dirname(options.output))
        warn "Error: Could not find output directory '#{File.dirname(options.output)}'"
        exit 1
      end
    end

    opts.on(
      '-s VERSION',
      '--src_version VERSION',
      'Compliance Mapper source API version',
      "  Default: #{options.src_version}",
    ) do |arg|
      options.src_version = arg.strip

      unless %r{\d+\.\d+\.\d+}.match?(options.src_version)
        warn 'Error: src_version must be of the form X.Y.Z'
        exit 1
      end
    end

    opts.on(
      '-d VERSION',
      '--dst_version VERSION',
      'Compliance Mapper destination API version',
      "  Default: #{options.dst_version}",
    ) do |arg|
      options.dst_version = arg.strip

      unless %r{\d+\.\d+\.\d+}.match?(options.dst_version)
        warn 'Error: src_version must be of the form X.Y.Z'
        exit 1
      end
    end

    opts.on(
      '-f FORMAT',
      '--output_format FORMAT',
      'The output format. May be one of "json" or "yaml"',
      "  Default: #{options.output_format}",
    ) do |arg|
      options.output_format = arg.strip

      unless ['yaml', 'json'].include?(options.output_format)
        warn 'Error: The output format must be one of "yaml" or "json"'
        exit 1
      end
    end

    opts.on(
      '-m MODULE',
      '--module MODULE',
      'For 2.0 migrations, isolate the target module to output. If left out, all will be output.',
    ) do |arg|
      options.target_module = arg.strip
    end

    opts.on(
      '-c FACT=VALUE',
      '--confine FACT=VALUE',
      'For 2.0 migrations, specify confinement for the target data',
    ) do |arg|
      c = arg.split(%r{\s*=\s*})
      options.confine[c[0]] = c[1]
    end

    opts.on(
      '-a STRING',
      '--append STRING',
      'For 2.0 migrations, append STRING to check key',
    ) do |arg|
      options.append = arg.strip
    end

    opts.on(
      '-h',
      '--help',
      'Help Message',
    ) do
      puts opts
      exit(0)
    end
  end

  begin
    _opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    puts e
    puts _opts
    exit 1
  end

  if options.input.empty?
    warn "You must pass an input file to #{$PROGRAM_NAME}"
    puts _opts
    exit 1
  end

  unless options.output
    options.output = File.join(
      File.dirname(options.input[0]),
      "#{File.basename(options.input[0], '.yaml')}.#{options.dst_version}.yaml",
    )
  end

  options.input.each do |infile|
    if File.exist?(infile)
      begin
        data = {}
        data = if %r{\.yaml$}.match?(_infile)
                 YAML.load_file(_infile)
               else
                 JSON.parse(File.read(_infile))
               end
        options.input_hash = deep_merge(options.input_hash, data)
      rescue Psych::SyntaxError, JSON::JSONError
        warn "Error: Could not parse input file '#{infile}'"
      end
    else
      warn "Error: Could not find input file '#{infile}'"
      exit 1
    end
  end

  unless options.src_version
    # 0.0.1
    options.src_version = options.input_hash['version']

    unless options.src_version
      # 1.0.0
      unless options.input_hash['compliance_markup::compliance_map'].nil?
        options.src_version = options.input_hash['compliance_markup::compliance_map']['version']
      end

      unless options.src_version
        warn "Error: Could not determine source version from '#{_infile}'"
        exit 1
      end
    end
  end

  options
end

# Translate from one compliance map version to another
class HieraXlat
  attr_reader :src_version, :dst_version

  def initialize(from, to)
    @src_version = from
    @dst_version = to
  end

  def xlat_0_0_1_to_1_0_0(options)
    output_hash = {
      'compliance_map::percent_sign' => '%',

      'compliance_map' => {
        'version' => '1.0.0'
      }
    }

    options.input_hash.keys.sort.each do |entry|
      garbage, policy, *key = entry.split('::')
      key = key.join('::')

      if garbage == 'compliance'
        output_hash['compliance_map'][policy] ||= {}

        unless options.input_hash[entry]['identifier'].nil?
          options.input_hash[entry]['identifiers'] = Array(options.input_hash[entry]['identifier'])
          options.input_hash[entry].delete('identifier')
        end

        value = options.input_hash[entry]['value']

        if value.is_a?(String)
          value.gsub!('global::percent_sign', 'compliance_map::percent_sign')
        end

        options.input_hash[entry]['value'] = value

        # Ordering for readability
        main_sections = ['identifiers', 'value', 'notes']
        other_sections = (options.input_hash[entry].keys - main_sections)

        (main_sections + other_sections).each do |section|
          output_hash['compliance_map'][policy][key] ||= {}

          unless options.input_hash[entry][section].nil?
            output_hash['compliance_map'][policy][key][section] = options.input_hash[entry][section]
          end
        end
      elsif garbage == 'global'
        next
      else
        warn "Warning: Unknown source entry '#{entry}'"
        next
      end
    end

    output_hash
  end

  def xlat_1_0_0_to_2_0_0(options)
    output_hash = {
      'version' => '2.0.0',
      'checks' => {}
    }

    check_header = 'oval:com.puppet.forge.simp'

    maps = options.input_hash['compliance_markup::compliance_map']

    policies = maps.keys
    policies.delete('version')

    policies.each do |policy|
      params = maps[policy].keys.sort

      params.each do |param|
        if options.target_module
          next unless param.split('::').first == options.target_module
        end

        unique_name = "#{check_header}.#{param.gsub('::', '.')}"

        unless options.append.empty?
          unique_name.concat('.', options.append)
        end

        new_check = {
          'settings'    => {
            'parameter' => param,
            'value'     => maps[policy][param]['value']
          },
          'type'        => 'puppet-class-parameter',
          'controls'    => {},
          'identifiers' => {},
        }

        output_hash['checks'][unique_name] ||= new_check

        until output_hash['checks'][unique_name]['settings']['value'] == maps[policy][param]['value']
          unique_name.concat('.', policy)
          output_hash['checks'][unique_name] ||= new_check
        end

        unless options.confine.empty?
          if output_hash['checks'][unique_name]['confine'].nil?
            output_hash['checks'][unique_name]['confine'] = options.confine
          else
            output_hash['checks'][unique_name]['confine'].merge!(options.confine)
          end
        end

        identifiers = maps[policy][param]['identifiers'].map do |v|
          v.gsub(%r{\(([^\)]*)\)}, ':\1')
        end

        if output_hash['checks'][unique_name]['identifiers'][policy].nil?
          output_hash['checks'][unique_name]['identifiers'][policy] = identifiers
        else
          output_hash['checks'][unique_name]['identifiers'][policy].concat(identifiers)
        end

        if policy == 'disa_stig'
          output_hash['checks'][unique_name]['controls'][policy] = true

          output_hash['checks'][unique_name]['controls'].merge!(identifiers.map { |identifier|
            if (m = %r{^(CCI)-}.match(identifier))
              ["#{m[1].downcase}:#{identifier}", true]
            else
              [identifier, true]
            end
          }.to_h)
        else
          output_hash['checks'][unique_name]['controls'].merge!(identifiers.map { |identifier|
            ["#{policy}:#{identifier}", true]
          }.to_h)
        end

        unless maps[policy][param]['oval-ids'].nil?
          if output_hash['checks'][unique_name]['oval-ids'].nil?
            output_hash['checks'][unique_name]['oval-ids'] = maps[policy][param]['oval-ids']
          else
            output_hash['checks'][unique_name]['oval-ids'].concat(maps[policy][param]['oval-ids']).uniq!
          end
        end
      end
    end

    output_hash
  end

  def process(options)
    xlat_name = "xlat_#{@src_version.tr('.', '_')}_to_#{@dst_version.tr('.', '_')}"

    unless respond_to?(xlat_name)
      warn "Error: Cannot translate from #{@src_version} to #{@dst_version}"

      exit(1)
    end
    to_ret = send(xlat_name.to_sym, options)

    to_ret = if options.output_format == 'yaml'
               YAML.dump(YAML.safe_load(to_ret.to_json))
             else
               JSON.pretty_generate(to_ret)
             end

    to_ret
  end
end

options = parse_options

output = HieraXlat.new(options.src_version, options.dst_version).process(options)

backup_file = File.join(File.dirname(options.output), "#{File.basename(options.output, '.yaml')}.#{@uid}.yaml")

if File.exist?(options.output)
  puts "Info: Backing up pre-existing output file\n  '#{options.output}' to\n  '#{backup_file}'"

  FileUtils.mv(options.output, backup_file)
end

File.open(options.output, 'w') do |fh|
  fh.puts(output)
end
